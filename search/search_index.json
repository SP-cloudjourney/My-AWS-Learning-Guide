{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My AWS Learning Guide","text":"My AWS Learning Guide <p>Posted: June 1, 2025</p> <p>Thank you for visiting my learning portfolio. This site documents my personal journey as I prepare for the AWS Certified Solutions Architect Associate (SAA C03) certification. It is a hands-on project where I learn in public by breaking down complex cloud concepts into practical, beginner-friendly explanations.</p> <p>The goal of this site is twofold. First, to deepen my understanding of AWS services through writing and teaching. Second, to organise my learning in a way that helps with long-term understanding and recall. Each topic reflects not only what I have studied, but also how I interpret and apply key concepts. These range from core services like EC2 and S3 to areas such as identity management, networking, and architectural design.</p> <p>Although this site is mainly a personal resource, I have made it public in case it can help others who are also learning about cloud computing. Whether you are just getting started, exploring AWS for the first time, or simply curious, I hope it gives a useful and honest look at where I am in my cloud journey.</p>"},{"location":"budgets/","title":"Setting budgets and billing alerts","text":"Setting budgets and billing alerts"},{"location":"budgets/#staying-within-the-free-tier","title":"Staying Within the Free Tier","text":"<p>When you first create an AWS account, it is easy to accidentally use paid services without realising it. That is why one of the first things I did was set up a billing budget and email alerts. This helps me stay within the Free Tier and avoid unexpected charges.</p>"},{"location":"budgets/#what-is-the-free-tier","title":"What Is the Free Tier?","text":"<p>AWS offers a Free Tier that allows you to use many services at no cost for the first twelve months. This includes:</p> <ul> <li>750 hours per month of EC2 t2.micro or t3.micro instances. If you're not familiar with EC2, I cover it in more detail in this section</li> <li>5 GB of standard S3 storage. You can read about S3 and how it works on this page</li> <li>1 million Lambda requests. I explain Lambda functions here</li> <li>25 GB of DynamoDB storage. You will find an overview of DynamoDB in this section</li> </ul> <p>The Free Tier is generous for learning, but it is not unlimited. If you go over the included usage, you will be charged.</p>"},{"location":"budgets/#why-set-a-budget","title":"Why Set a Budget?","text":"<p>Budgets help you track how much you are spending, or are about to spend. Even if you plan to stay within the Free Tier, it is useful to:</p> <ul> <li>Receive email alerts when you are nearing usage limits</li> <li>Keep an eye on any unexpected costs</li> <li>Learn how AWS billing works in practice</li> </ul>"},{"location":"budgets/#how-to-create-a-budget-in-aws","title":"How to Create a Budget in AWS","text":"<ol> <li> <p>Go to the Billing Dashboard:  https://console.aws.amazon.com/billing</p> </li> <li> <p>In the left-hand menu, click Budgets</p> </li> <li> <p>Click Create a budget and select Cost budget</p> </li> <li> <p>Name your budget (for example, \u201cFree Tier Budget\u201d) and choose Recurring monthly</p> </li> <li> <p>Set a fixed monthly amount. I chose \u00a31.00, so I would be notified of any cost at all</p> </li> <li> <p>Under Alerts, set up email notifications for when your actual cost goes over \u00a30.50 and again at \u00a31.00</p> </li> <li> <p>Review and confirm to create the budget</p> </li> </ol>"},{"location":"budgets/#setting-free-tier-usage-alerts-optional-but-helpful","title":"Setting Free Tier Usage Alerts (Optional but Helpful)","text":"<ol> <li> <p>Go to the Billing Preferences page</p> </li> <li> <p>Tick the box to Receive Free Tier Usage Alerts</p> </li> <li> <p>Enter your email address and save</p> </li> </ol> <p>You will now receive alerts when your Free Tier usage reaches 85 percent and 100 percent.</p>"},{"location":"budgets/#my-setup","title":"My Setup","text":"<p>I personally set my budget at \u00a31.00 with alerts at \u00a30.50 and \u00a31.00. I also turned on Free Tier usage alerts so I would be notified before I go over any limits. This gives me peace of mind while I explore services and experiment in my account.</p>"},{"location":"budgets/#summary","title":"Summary","text":"<p>Setting a budget and turning on usage alerts is a quick but valuable step when starting with AWS. It helps you stay in control, avoid unnecessary charges, and build good habits early in your cloud learning journey.</p>"},{"location":"cli/","title":"CLI - Command Line Interface","text":"CLI - Command Line Interface"},{"location":"ec2/","title":"EC2 - Elastic Compute Cloud","text":"EC2 - Elastic Compute Cloud"},{"location":"getting%20started%20with%20aws/","title":"Getting started with AWS","text":"Getting started with AWS"},{"location":"getting%20started%20with%20aws/#creating-a-root-account","title":"Creating a Root Account","text":""},{"location":"getting%20started%20with%20aws/#what-is-a-root-account","title":"What Is a Root Account?","text":"<p>When you sign up for AWS for the first time, you are creating what is called the root account. This is the main owner account for your entire AWS environment. It has full access to everything, including services, settings, and billing.</p> <p>You can think of it like the admin login on your personal computer, except it controls all the cloud resources in your AWS setup. Whoever has access to the root account has complete control.</p>"},{"location":"getting%20started%20with%20aws/#why-it-matters","title":"Why It Matters","text":"<p>Because the root account has full permissions, it is also the most sensitive. If someone gains access to it without authorisation, they can make changes to your entire environment. AWS recommends using the root account only when absolutely necessary, such as for setting up your account and enabling security features. After that, you should avoid using it for daily tasks and instead work through limited-access accounts.</p>"},{"location":"getting%20started%20with%20aws/#how-to-create-a-root-account","title":"How to Create a Root Account","text":"<p>You do not need any technical experience to get started. All you need is an email address and a payment method.</p> <ol> <li>Go to aws.amazon.com</li> <li>Click Create an AWS Account</li> <li>Enter your email address and choose a password</li> <li>Name your account (this can be anything you like, such as \"My AWS Practice Lab\")</li> <li>Add your contact and billing information</li> <li>Select the Free Tier plan if you are just exploring</li> </ol> <p>Once you complete these steps, you will have access to the AWS Management Console. This is the dashboard where you can launch and manage all your cloud services.</p>"},{"location":"getting%20started%20with%20aws/#best-practices-after-creating-the-account","title":"Best Practices After Creating the Account","text":"<p>Once you have created your root account, it is important to secure it properly. Even if you are just using AWS for learning or experimentation, the root account has full access to everything. If someone else gains control of it, they could delete your resources, access your billing information, or launch expensive services without your permission.</p>"},{"location":"getting%20started%20with%20aws/#enable-multi-factor-authentication-mfa","title":"Enable Multi-Factor Authentication (MFA)","text":"<p>Multi-Factor Authentication, or MFA, adds an extra layer of security. In addition to your password, you will be asked to enter a code from your phone each time you log in.</p> <p>To enable MFA on your root account:</p> <ol> <li>Sign in to the AWS Management Console using your root account</li> <li>In the top-right corner, click on your account name and choose Security Credentials</li> <li>Scroll down to Multi-Factor Authentication (MFA) and click Activate MFA</li> <li>Choose Virtual MFA device</li> <li>Use an authenticator app on your phone (such as Google Authenticator, Authy, or Microsoft Authenticator) to scan the QR code</li> <li>Enter the two codes shown in your app to complete the setup</li> </ol> <p>After this, each time you log in, AWS will ask for a code from your MFA app. This helps protect your account even if someone knows your password.</p>"},{"location":"getting%20started%20with%20aws/#use-a-password-manager","title":"Use a Password Manager","text":"<p>The root account password should be long, complex, and unique. A password manager, such as Bitwarden, 1Password, or KeePass, can help you generate and store a strong password securely.</p>"},{"location":"getting%20started%20with%20aws/#limit-use-of-the-root-account","title":"Limit Use of the Root Account","text":"<p>After the initial setup, avoid logging in with the root account unless absolutely necessary. For all daily tasks, you should create an IAM user (which I cover here) and grant it only the permissions it needs.</p> <p>This reduces your risk and follows AWS best practice for account security.</p>"},{"location":"getting%20started%20with%20aws/#set-a-budget-and-billing-alerts","title":"Set a Budget and Billing Alerts","text":"<p>Although not strictly a security measure, setting a budget protects you from accidental charges. I enabled the Free Tier and also created a budget so I would be alerted if I ever go over. I will explain how to do this in Setting budgets and billing alerts.</p>"},{"location":"getting%20started%20with%20aws/#summary","title":"Summary","text":"<p>The root account is the most powerful access point to your AWS environment. It is necessary for setting up your account, but it should be used carefully and only when needed. Once your initial setup is complete, focus on using more secure, limited-access accounts for your daily tasks.</p>"},{"location":"iam/","title":"IAM - Identity and Access Management","text":"IAM - Identity and Access Management"},{"location":"iam/#what-is-iam","title":"What Is IAM?","text":"<p>IAM stands for Identity and Access Management. It is the AWS service that allows you to manage who can access your resources and what they are allowed to do. Instead of sharing the root account, IAM gives you the ability to create individual users with their own login credentials. Each user can have their own level of access depending on what you assign to them.</p> <p>IAM is one of the most important services for securing your account, and it forms the foundation of access control in AWS.</p>"},{"location":"iam/#why-use-iam-user-instead-of-the-root-account","title":"Why Use IAM User Instead of the Root Account?","text":"<p>The root account has unrestricted access to your entire AWS environment. If that account is compromised, everything in your account could be exposed, changed, or deleted.</p> <p>For that reason, AWS recommends using the root account only for a few specific tasks, such as setting up billing and enabling multi-factor authentication. For everything else, you should use IAM users with defined permissions.</p>"},{"location":"iam/#key-concepts-in-iam","title":"Key Concepts in IAM","text":"<p>Here are a few important terms to understand before we create any users:</p>"},{"location":"iam/#users","title":"Users","text":"<p>A user represents a person who needs access to your AWS environment. Each user can have their own username, password, and access keys. You can give users access to the AWS Console, to the AWS CLI (Command Line Interface) which I cover here, or both.</p>"},{"location":"iam/#groups","title":"Groups","text":"<p>A group is a collection of users. Instead of assigning permissions to each user individually, you can assign permissions to the group and then add users to that group. For example, you might create an \"Admins\" group and assign administrator permissions to it. Then, anyone you add to the group will automatically inherit those permissions.</p>"},{"location":"iam/#policies","title":"Policies","text":"<p>A policy is a document that defines what actions are allowed or denied. These policies can be attached to users, groups, or roles. AWS provides many pre-built policies that you can use, such as AdministratorAccess or ReadOnlyAccess.</p>"},{"location":"iam/#a-closer-look-at-iam-policies","title":"A Closer Look at IAM Policies","text":"<p>IAM policies are what actually define the permissions given to a user, group, or role. They are written in JSON format, but most of the time you will use AWS's pre-built, managed policies.</p> <p>Each policy contains a list of rules that describe what actions are allowed or denied, on which services, and under which conditions.</p> <p>For example, the <code>AdministratorAccess</code> policy grants full access to all AWS services, while a policy like <code>AmazonS3ReadOnlyAccess</code> only allows viewing S3 content without the ability to delete or upload files.</p> <p>You can attach policies directly to users, but it is usually better to assign them to groups. This makes permission management simpler and more consistent across users.</p> <p>In later sections, we will look at how to view, understand, and even write custom policies if needed. For now, it is enough to know that policies are the building blocks of access control in AWS.</p>"},{"location":"iam/#roles","title":"Roles","text":"<p>A role is similar to a user but it is not tied to a specific person. Instead, it can be assumed by users or services when needed. Roles are often used when one AWS service needs permission to interact with another service, or when you want to allow temporary access.</p> <p>For now, we will focus on creating users and groups. Roles will be explored in a future section.</p>"},{"location":"iam/#how-to-create-an-iam-user","title":"How to Create an IAM User","text":"<p>Here is how I created a new IAM user with administrator permissions:</p> <ol> <li> <p>In the AWS Console, go to IAM by typing it in the search bar at the top</p> </li> <li> <p>In the left-hand menu, choose Users, then click Add users</p> </li> <li> <p>Enter a username (for example, <code>admin-user</code>), then tick the boxes for AWS Management Console access and Programmatic access</p> </li> <li> <p>Create a custom password or let AWS generate one. I chose to require a password reset on first sign-in</p> </li> <li> <p>For permissions, choose Add user to group, then create a new group called <code>Admins</code> (or similar)</p> </li> <li> <p>Attach the AdministratorAccess policy to the group</p> </li> <li> <p>Complete the user creation process and make note of the IAM sign-in URL. This is a special login link that IAM users must use. Bookmark it for future use</p> </li> </ol>"},{"location":"iam/#the-principle-of-least-privilege","title":"The Principle of Least Privilege","text":"<p>When assigning permissions in IAM, it is considered best practice to follow the principle of least privilege. This means giving users only the permissions they need to complete their tasks, and nothing more.</p> <p>For example, if someone only needs to view files in S3, you should assign a read-only policy for S3 rather than full administrative access. By limiting what each user can do, you reduce the risk of mistakes or security issues if an account is ever compromised.</p> <p>In this guide, we are using an administrator user for simplicity, but it is important to be aware that in real environments, permissions should always be kept to the minimum necessary.</p>"},{"location":"iam/#access-keys-and-programmatic-access","title":"Access Keys and Programmatic Access","text":"<p>When creating an IAM user, you may have noticed the option to allow programmatic access. This type of access is used when interacting with AWS outside of the web console, such as through the AWS Command Line Interface (CLI) or Software Development Kit (SDKs)  like Python\u2019s boto3 or JavaScript\u2019s AWS SDK.</p> <p>If programmatic access is enabled, AWS generates a set of access keys for the user. These consist of an Access Key ID and a Secret Access Key. Together, these act like a username and password for connecting to AWS from tools and scripts.</p> <p>Access keys should be kept secure and never shared. If you lose them, you can delete and regenerate a new set in the IAM console.</p> <p>We will explore how to install, configure, and use the AWS CLI in this section. For now, it is important to understand that these access keys allow the user to connect to AWS in other ways beyond the console.</p>"},{"location":"iam/#best-practices","title":"Best Practices","text":"<p>After creating your IAM user:</p> <ul> <li>Log in with your new IAM user and confirm you have access to the AWS Console</li> <li>Enable multi-factor authentication for this user, just as you did with the root account</li> <li>Do not share your IAM credentials with anyone else</li> <li>Only use the root account when absolutely necessary</li> </ul>"},{"location":"iam/#what-we-will-use-going-forward","title":"What We Will Use Going Forward","text":"<p>From this point on, I will be using the IAM user we just created for all examples and walkthroughs, unless stated otherwise. This approach helps keep the root account safe and encourages secure habits from the beginning.</p>"},{"location":"iam/#summary","title":"Summary","text":"<p>IAM allows you to control who can access your AWS environment and what they can do. By creating users and assigning them to groups, you can avoid using the root account for everyday tasks. This not only improves security, but also prepares you for how access is managed in real-world cloud environments.</p>"},{"location":"iam/#download-flashcards-for-this-section","title":"Download Flashcards for This Section","text":"<p>You can download the flashcards I created for IAM in a format ready to import into Anki:</p> <p>\ud83d\udce5 Download IAM Flashcards (TSV)</p>"},{"location":"s3/","title":"S3 - Simple Storage Service","text":"S3 - Simple Storage Service S3"}]}